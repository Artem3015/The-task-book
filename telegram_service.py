import requests
from datetime import datetime, timedelta
import time
import threading
import json
import os

class TelegramService:
    def __init__(self):
        print("Initializing TelegramService")
        
        config = self._load_config()
        self.bot_token = config.get('TELEGRAM_BOT_TOKEN')
        
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ")
        
        self.base_url = f'https://api.telegram.org/bot{self.bot_token}'
        self.tasks_file = 'tasks.json'
        self.requests_history_file = 'requests_history.json'
        self.is_running = False
        self.sent_reminders = set()
        self.updates_thread = None

        if not os.path.exists(self.requests_history_file):
            with open(self.requests_history_file, 'w', encoding='utf-8') as f:
                json.dump([], f)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.reply_keyboard = None

    def _show_main_menu(self, chat_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –∫–Ω–æ–ø–æ–∫"""
        self.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        )

    def handle_updates(self):
        if self.is_running:
            print("handle_updates —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        self.is_running = True
        print("Starting update handling")
        last_update_id = None
        while self.is_running:
            try:
                url = f'{self.base_url}/getUpdates'
                params = {'offset': last_update_id, 'timeout': 30}
                response = requests.get(url, params=params, timeout=40)
                if response.status_code != 200:
                    print(f"–û—à–∏–±–∫–∞ Telegram API: {response.status_code} - {response.text}")
                    if response.status_code == 409:
                        print("–ö–æ–Ω—Ñ–ª–∏–∫—Ç getUpdates, –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
                        last_update_id = None
                        time.sleep(5)
                        continue
                    continue
                updates = response.json().get('result', [])
                
                for update in updates:
                    last_update_id = update['update_id'] + 1
                    if 'message' in update and 'text' in update['message']:
                        chat_id = update['message']['chat']['id']
                        text = update['message']['text']
                        username = update['message']['chat'].get('username', '')
                        name = update['message']['chat'].get('first_name', '') + ' ' + update['message']['chat'].get('last_name', '')
                        name = name.strip() or username or str(chat_id)
                        
                        self._log_request(chat_id, text, username, name)
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
                        if text == '/start':
                            welcome_msg = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Task Manager Bot!\n\n" \
                                        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.\n" \
                                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã."
                            self.send_message(chat_id, welcome_msg)
                        elif text == '/getid' or text.lower() == 'üÜî –º–æ–π id (/getid)':
                            self.send_message(chat_id, f"–í–∞—à Telegram ID: `{chat_id}`")
                        elif text.startswith('/setname') or text.lower().startswith('üë§ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è (/setname)'):
                            name = text[9:].strip() if text.startswith('/setname') else text[25:].strip()
                            if not name:
                                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/setname –ò–≤–∞–Ω\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è' –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è")
                            else:
                                self._log_request(chat_id, text, username, name)
                                self.send_message(chat_id, f"–ò–º—è '{name}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                        elif text.lower() == '/mytasks' or text.lower() == 'üìã –º–æ–∏ –∑–∞–¥–∞—á–∏ (/mytasks)':
                            tasks = self.get_user_tasks_for_week(chat_id)
                            if not tasks:
                                self.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.")
                            else:
                                message = "*–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é:*\n\n"
                                for i, task in enumerate(tasks, 1):
                                    message += f"{i}. {self._format_task_message(task)}\n"
                                self.send_message(chat_id, message)
                        elif text.lower() == '/new_task' or text.lower() == '‚ûï –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (/new_task)':
                            example_date = datetime.now().strftime('%d.%m.%Y %H:%M')
                            help_text = f"""üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"

üîπ *–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏*
üîπ *–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã*: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú

–ü—Ä–∏–º–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞:
"–ú–æ—è –∑–∞–¥–∞—á–∞" "{example_date}"
"""
                            self.send_message(chat_id, help_text)
                        else:
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
                            if self._is_task_creation_message(text):
                                task_data = self._parse_task_creation(text)
                                if task_data:
                                    self._create_task(chat_id, task_data)
                                    self.send_message(chat_id, f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:\n\n*{task_data['text']}*\n–ù–∞ *{task_data['datetime']}*")
                                else:
                                    self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\" \"–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\"")
                            else:
                                self._show_main_menu(chat_id)
            
            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            time.sleep(5)

    def _is_task_creation_message(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        return text.count('"') >= 2

    def _parse_task_creation(self, text):
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏"""
        try:
            parts = [p.strip('"') for p in text.split('"') if p.strip()]
            if len(parts) >= 2:
                task_text = parts[0]
                datetime_str = parts[1]
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
                datetime_obj = datetime.strptime(datetime_str, '%d.%m.%Y %H:%M')
                
                return {
                    'text': task_text,
                    'datetime': datetime_obj.isoformat(),
                    'chat_id': None,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                    'created_at': datetime.now().isoformat()
                }
        except ValueError:
            return None
        return None

    def _create_task(self, chat_id, task_data):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
            tasks = []
            if os.path.exists(self.tasks_file):
                with open(self.tasks_file, 'r', encoding='utf-8') as f:
                    tasks = json.load(f)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            new_id = max([t.get('id', 0) for t in tasks] or [0]) + 1
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            new_task = {
                'id': new_id,
                'text': task_data['text'],
                'datetime': task_data['datetime'],
                'chat_id': chat_id,
                'created_at': task_data['created_at'],
                'completed': False
            }
            
            tasks.append(new_task)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            with open(self.tasks_file, 'w', encoding='utf-8') as f:
                json.dump(tasks, f, indent=2, ensure_ascii=False)
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            return False

    def get_user_tasks_for_week(self, chat_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π."""
        try:
            with open(self.tasks_file, 'r', encoding='utf-8') as f:
                tasks = json.load(f)
            
            now = datetime.now()
            week_later = now + timedelta(days=7)
            
            user_tasks = []
            for task in tasks:
                if not task.get('datetime') or task.get('completed'):
                    continue
                    
                task_time = datetime.fromisoformat(task['datetime'])
                if (task.get('chat_id') == chat_id or 
                    (task.get('group') and any(u['chat_id'] == chat_id and u.get('group') == task['group'] for u in self._get_users()))):
                    if now <= task_time <= week_later:
                        user_tasks.append(task)
            
            return user_tasks
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return []

    def _get_users(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ users.json."""
        try:
            with open('users.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return []

    def _format_task_message(self, task):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."""
        message = f"*–ó–∞–¥–∞—á–∞:* {task['text']}\n"
        if task.get('description'):
            message += f"\n*üìù –û–ø–∏—Å–∞–Ω–∏–µ:*\n{task['description']}\n"
        if task.get('category'):
            message += f"\n*üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {task['category']}\n"
        if task.get('datetime'):
            task_time = datetime.fromisoformat(task['datetime'])
            message += f"\n*‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {task_time.strftime('%d.%m.%Y %H:%M')}\n"
        if task.get('reminder_time'):
            message += f"\n*üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞:* {task['reminder_time']} –º–∏–Ω.\n"
        if task.get('group'):
            message += f"\n*üë• –ì—Ä—É–ø–ø–∞:* {task['group']}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        if task.get('files'):
            message += f"\n*üìé –í–ª–æ–∂–µ–Ω–∏—è:* {len(task['files'])} —Ñ–∞–π–ª–æ–≤\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
        if task.get('repeat_interval'):
            intervals = {
                'day': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
                'week': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
                'month': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
                'quarter': '–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ',
                'year': '–ï–∂–µ–≥–æ–¥–Ω–æ'
            }
            message += f"\n*üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:* {intervals[task['repeat_interval']]}\n"
            if task.get('repeat_count'):
                message += f"*üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:* {task['repeat_count']}\n"
            if task.get('repeat_until'):
                message += f"*‚è≥ –ü–æ–≤—Ç–æ—Ä—è—Ç—å –¥–æ:* {task['repeat_until']}\n"

        return message

    def check_reminders(self):
        print("Starting reminder checks")
        while True:
            try:
                with open(self.tasks_file, 'r', encoding='utf-8') as f:
                    tasks = json.load(f)
        
                current_time = datetime.now()
        
                for task in tasks:
                    task_id = task.get('id')
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π - –ª–∏–±–æ –∏–∑ chat_ids, –ª–∏–±–æ –∏–∑ chat_id
                    recipients = []
                    if task.get('chat_ids'):
                        recipients.extend(task['chat_ids'])
                    elif task.get('chat_id'):
                        recipients.append(task['chat_id'])
                
                    if (task.get('datetime') and recipients and not task.get('completed') 
                        and task.get('reminder_time') is not None and task_id not in self.sent_reminders):
                
                        task_time = datetime.fromisoformat(task['datetime'])
                        reminder_minutes = int(task['reminder_time'])
                        reminder_time = task_time - timedelta(minutes=reminder_minutes)
                
                        if current_time >= reminder_time and current_time <= reminder_time + timedelta(minutes=1):
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                            message = "*üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ:*\n\n"
                            message += self._format_task_message(task)
                    
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                            for chat_id in recipients:
                                self.send_message(chat_id, message)
                        
                                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
                                if task.get('files'):
                                    for file_info in task['files']:
                                        try:
                                            file_path = os.path.join('task_files', file_info['path'])
                                            if os.path.exists(file_path):
                                                with open(file_path, 'rb') as file:
                                                    url = f'{self.base_url}/sendDocument'
                                                    files = {'document': (file_info['name'], file)}
                                                    data = {'chat_id': chat_id}
                                                    response = requests.post(url, files=files, data=data)
                                                    if response.status_code != 200:
                                                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {response.text}")
                                        except Exception as e:
                                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_info['name']}: {e}")
                    
                            self.sent_reminders.add(task_id)
                            print(f"Sent reminders for task {task_id} to {len(recipients)} recipients")
    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
            time.sleep(60)

    def _load_config(self):
        config_path = os.getenv('CONFIG_PATH', os.path.join(os.path.dirname(__file__), 'config.json'))
        config_dir = os.path.dirname(config_path)
        
        if config_dir and not os.path.exists(config_dir):
            os.makedirs(config_dir, exist_ok=True)
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        except json.JSONDecodeError:
            raise ValueError(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_path}")

    def _log_request(self, chat_id, text, username=None, name=None):
        try:
            with open(self.requests_history_file, 'r', encoding='utf-8') as f:
                history = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            history = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º chat_id
        for entry in history:
            if entry.get('chat_id') == chat_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                entry.update({
                    'text': text,
                    'username': username or entry.get('username', ''),
                    'name': name or entry.get('name', str(chat_id)),
                    'timestamp': datetime.now().isoformat()
                })
                break
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            history.append({
                'chat_id': chat_id,
                'text': text,
                'username': username,
                'name': name or str(chat_id),
                'timestamp': datetime.now().isoformat()
            })

        with open(self.requests_history_file, 'w', encoding='utf-8') as f:
            json.dump(history, f, indent=2)

    def send_message(self, chat_id, text):
        try:
            url = f'{self.base_url}/sendMessage'
            payload = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'Markdown'
            }
            response = requests.post(url, json=payload, timeout=10)
            if response.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ Telegram API: {response.status_code} - {response.text}")
                return None
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return None

    def get_chat_id_by_username(self, username):
        """–ü–æ–ª—É—á–∞–µ—Ç chat_id –∏ –∏–º—è –ø–æ username –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, —É—á–∏—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ @."""
        try:
            with open(self.requests_history_file, 'r', encoding='utf-8') as f:
                history = json.load(f)
            # –£–¥–∞–ª—è–µ–º @ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ username –¥–ª—è –ø–æ–∏—Å–∫–∞
            normalized_username = username.lstrip('@')
            for entry in history:
                if entry.get('username') and normalized_username == entry.get('username').lstrip('@'):
                    return {
                        'chat_id': entry['chat_id'],
                        'name': entry.get('name', username)
                    }
            
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat_id: {e}")
            return None

    def handle_updates(self):
        if self.is_running:
            print("handle_updates —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        self.is_running = True
        print("Starting update handling")
        last_update_id = None
        while self.is_running:
            try:
                url = f'{self.base_url}/getUpdates'
                params = {'offset': last_update_id, 'timeout': 30}
                response = requests.get(url, params=params, timeout=40)
                if response.status_code != 200:
                    print(f"–û—à–∏–±–∫–∞ Telegram API: {response.status_code} - {response.text}")
                    if response.status_code == 409:
                        print("–ö–æ–Ω—Ñ–ª–∏–∫—Ç getUpdates, –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å")
                        last_update_id = None
                        time.sleep(5)
                        continue
                    continue
                updates = response.json().get('result', [])
            
                for update in updates:
                    last_update_id = update['update_id'] + 1
                    if 'message' in update and 'text' in update['message']:
                        chat_id = update['message']['chat']['id']
                        text = update['message']['text']
                        username = update['message']['chat'].get('username', '')
                        name = update['message']['chat'].get('first_name', '') + ' ' + update['message']['chat'].get('last_name', '')
                        name = name.strip() or username or str(chat_id)
                    
                        self._log_request(chat_id, text, username, name)
                    
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
                        if text == '/start':
                            welcome_msg = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Task Manager Bot!\n\n" \
                                        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.\n" \
                                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã."
                            self.send_message(chat_id, welcome_msg)
                    
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /getid
                        elif text == '/getid' or text.lower() == 'üÜî –º–æ–π id (/getid)':
                            self.send_message(chat_id, f"–í–∞—à Telegram ID: `{chat_id}`")
                    
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /setname
                        elif text.startswith('/setname') or text.lower().startswith('üë§ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è (/setname)'):
                            name = text[9:].strip() if text.startswith('/setname') else text[25:].strip()
                            if not name:
                                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/setname –ò–≤–∞–Ω\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è' –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è")
                            else:
                                self._log_request(chat_id, text, username, name)
                                self.send_message(chat_id, f"–ò–º—è '{name}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                    
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mytasks
                        elif text.lower() == '/mytasks' or text.lower() == 'üìã –º–æ–∏ –∑–∞–¥–∞—á–∏ (/mytasks)':
                            tasks = self.get_user_tasks_for_week(chat_id)
                            if not tasks:
                                self.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.")
                            else:
                                message = "*–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é:*\n\n"
                                for i, task in enumerate(tasks, 1):
                                    message += f"{i}. {self._format_task_message(task)}\n"
                                self.send_message(chat_id, message)
                    
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /new_task
                        elif text.lower() == '/new_task' or text.lower() == '‚ûï –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (/new_task)':
                            example_date = datetime.now().strftime('%d.%m.%Y %H:%M')
                            help_text = f"""üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"

üîπ *–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏*
üîπ *–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã*: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú

–ü—Ä–∏–º–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞:
"–ú–æ—è –∑–∞–¥–∞—á–∞" "{example_date}"
"""
                            self.send_message(chat_id, help_text)
                    
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
                        elif text.lower() == '/help':
                            help_text = """ü§ñ *–ú–µ–Ω—é –±–æ—Ç–∞*:

üìù /new_task - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
üìã /mytasks - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
üë§ /setname - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à–µ –∏–º—è
üÜî /getid - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üìå *–§–æ—Ä–º–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏*:
"–ù–∞–∑–≤–∞–Ω–∏–µ" "–î–∞—Ç–∞ –≤—Ä–µ–º—è"
–ü—Ä–∏–º–µ—Ä: "–í—Å—Ç—Ä–µ—á–∞" "25.07.2023 15:30"
"""
                            self.send_message(chat_id, help_text)
                    
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                        elif self._is_task_creation_message(text):
                            task_data = self._parse_task_creation(text)
                            if task_data:
                                if self._create_task(chat_id, task_data):
                                    self.send_message(chat_id, f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:\n\n*{task_data['text']}*\n–ù–∞ *{datetime.fromisoformat(task_data['datetime']).strftime('%d.%m.%Y %H:%M')}*")                
                                else:
                                    self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
                            else:
                                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\" \"–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\"")
                    
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                        else:
                            self._show_main_menu(chat_id)
        
            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            time.sleep(5)

    def start_reminder_thread(self):
        print("Starting reminder and update threads")
        if self.updates_thread and self.updates_thread.is_alive():
            print("Updates thread already running, skipping")
            return
        reminder_thread = threading.Thread(target=self.check_reminders, daemon=True)
        self.updates_thread = threading.Thread(target=self.handle_updates, daemon=True)
        reminder_thread.start()
        self.updates_thread.start()

    def stop(self):
        print("Stopping TelegramService")
        self.is_running = False
        if self.updates_thread:
            self.updates_thread = None